{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","products","product","name","price","producer","created_at","getProducts","fetch","then","response","json","setState","data","catch","err","console","error","addProduct","editProduct","id","log","deleteProduct","renderProduct","product_id","key","className","toFixed","slice","onClick","this","map","value","onChange","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.644f082d.chunk.js","sourcesContent":["import React from \"react\";\n\nclass App extends React.Component {\n  state = {\n    products: [],\n    product: {\n      name: \"\",\n      price: \"\",\n      producer: \"\",\n      created_at: \"\"\n    }\n  };\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n  getProducts = () => {\n    fetch(\"http://localhost:4000/products\")\n      .then(response => response.json())\n      .then(response =>\n        this.setState({\n          products: response.data\n        })\n      )\n      .catch(err => console.error(err));\n  };\n\n  addProduct = () => {\n    const { product } = this.state;\n    fetch(\n      `http://localhost:4000/products/add?name=${product.name}&price=${product.price}&producer=${product.producer}&created_at=${product.created_at}`\n    )\n      .then(this.getProducts)\n      .catch(err => console.error(err));\n  };\n\n  editProduct = id => {\n    const { product } = this.state;\n    console.log(this.state.products);\n    fetch(\n      `http://localhost:4000/products/edit/${id}?name=${product.name}&price=${product.price}`\n    )\n      .then(this.getProducts)\n      .catch(err => console.error(err));\n  };\n\n  deleteProduct = id => {\n    fetch(`http://localhost:4000/products/delete/${id}`)\n      .then(this.getProducts)\n      .catch(err => console.error(err));\n  };\n\n  renderProduct = ({ product_id, name, price, producer, created_at }) => (\n    <div key={product_id} className=\"grid\">\n      <span>{product_id}</span>\n      <span>{name}</span>\n      <span>{price.toFixed(2)}</span>\n      <span>{producer}</span>\n      <span>{created_at.slice(0, 10)}</span>\n      <button onClick={() => this.editProduct(product_id)}>Edit</button>\n      <button onClick={() => this.deleteProduct(product_id)}>Delete</button>\n    </div>\n  );\n\n  render() {\n    const { products, product } = this.state;\n    return (\n      <div className=\"App\">\n        <h1>React with mySQL</h1>\n        <div className=\"grid\">\n          <span>\n            <strong>Id</strong>\n          </span>\n          <span>\n            <strong>Name</strong>\n          </span>\n          <span>\n            <strong>Price</strong>\n          </span>\n          <span>\n            <strong>Producer</strong>\n          </span>\n          <span>\n            <strong>Created at</strong>\n          </span>\n          <span>\n            <strong>Edit</strong>\n          </span>\n          <span>\n            <strong>Delete</strong>\n          </span>\n        </div>\n\n        {products.map(this.renderProduct)}\n        <div>\n          <label>Name</label>\n          <input\n            value={product.name}\n            onChange={e =>\n              this.setState({ product: { ...product, name: e.target.value } })\n            }\n          />\n          <label>Price</label>\n          <input\n            value={product.price}\n            onChange={e =>\n              this.setState({ product: { ...product, price: e.target.value } })\n            }\n          />\n          <label>Producer</label>\n          <input\n            value={product.producer}\n            onChange={e =>\n              this.setState({ product: { ...product, price: e.target.value } })\n            }\n          />\n          <label>Created at</label>\n          <input\n            value={product.created_at}\n            onChange={e =>\n              this.setState({ product: { ...product, price: e.target.value } })\n            }\n          />\n          <button onClick={this.addProduct}>Add Product</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}